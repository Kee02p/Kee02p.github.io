<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>打堆第一步,先”斩“结构体</title>
    <link href="/2023/10/04/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2023/10/04/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里我们主要以CTF wiki 上UAF的例题hacknote为例 去创建一个结构体 探索堆题代码结构的真相 让pwn师傅少点逆向的痛</p><p>题目：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote/hacknote">ctf-challenges&#x2F;pwn&#x2F;heap&#x2F;use_after_free&#x2F;hitcon-training-hacknote&#x2F;hacknote at master · ctf-wiki&#x2F;ctf-challenges (github.com)</a></p><p>引用：<a href="http://f0und.icu/article/13.html#0x10_%E6%81%A2%E5%A4%8D%E7%BB%93%E6%9E%84%E4%BD%93">IDA 分析技巧记录 - F0und</a></p></blockquote><h2 id="1-分析程序"><a href="#1-分析程序" class="headerlink" title="1.分析程序"></a>1.分析程序</h2><p>分析程序 我们发现 主要有这几个需要添加结构体来便于我们分析 首先我们要知道的是</p><blockquote><p>**(&amp;notelist + i)  存的其实是print_note_content这个函数的指针</p><p>*(v0 + 4) 存的其实是content_chunk的指针值</p><p><em>(</em>(&amp;notelist + i) + 1) 这个位置 存储的其实是content的内容</p></blockquote><p>下面我们来讨论一个问题：</p><blockquote><p> 我们要区分 *(v0 + 4) 和 <em>(</em>(&amp;notelist + i) + 1) 里的4 1分别是什么型？</p></blockquote><p>根据指针的运算 我们知道</p><p>其实这里的4 是四个字节 而这里的1 是加了一个整数类型</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926112444800-1696396536733-1.png" alt="image-20230926112444800"></p><h2 id="2-创造结构体"><a href="#2-创造结构体" class="headerlink" title="2.创造结构体"></a>2.创造结构体</h2><p>根据分析内容 我们开始尝试去创建结构体</p><p>我们可以直接使用shift＋F1 来进入struct的页面 ida里允许我们直接去写一段c代码的struct来插入(我们只需要在struct界面敲insert键)</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926113317228-1696396536733-2.png" alt="image-20230926113317228"></p><p>我们去拟定我们的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"># 我们创建一个名叫hacknote的结构体 并且起了一个简写名称叫note<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">note</span>&#123;</span><br><span class="hljs-type">char</span> * print_ptr;<br><span class="hljs-type">char</span> * content;<br>&#125;hacknote;<br></code></pre></td></tr></table></figure><p>如下图所示:</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926113708054-1696396536733-3.png" alt="image-20230926113708054"></p><p>我们成功的添加进入了 两个结构体</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926113745669-1696396536733-4.png" alt="image-20230926113745669"></p><h2 id="3-修改数据类型"><a href="#3-修改数据类型" class="headerlink" title="3.修改数据类型"></a>3.修改数据类型</h2><p>我们先修改第一块内容的&amp;notelist+i的内容 按“Y”键查看 ida本来给他识别的数据类型</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145358287-1696396536733-5.png" alt="image-20230926145358287"></p><p>按照循环我们知道 应该是会创建5个notelist数组 这里我们能直接修改数组内容</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145638994-1696396536733-6.png" alt="image-20230926145638994"></p><p>修改数组内容如下：</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145754188-1696396536733-7.png" alt="image-20230926145754188"></p><p>我们可以看到 notelist数组已经被修的十分完美了</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926145850975-1696396536733-8.png" alt="image-20230926145850975"></p><blockquote><p>接下来我们来使用我们的结构体</p></blockquote><p>同样的 我们选中notelist数组 修改类型</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926150042763-1696396536733-9.png" alt="image-20230926150042763"></p><p>这里我们看到这个类型为void型 我们可以改成我们的结构类型note</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926150206058-1696396536733-10.png" alt="image-20230926150206058"></p><p>修完后 我们就可以很清楚的发现我们的代码更清晰了</p><p><img src="/%E5%85%88%E2%80%9D%E6%96%A9%E2%80%9C%E7%BB%93%E6%9E%84%E4%BD%93/image-20230926150308428-1696396536733-11.png" alt="image-20230926150308428"></p><blockquote><p>到此，你就已经完成了一次结构体的创建与修复。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/03/hello-world/"/>
    <url>/2023/10/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
